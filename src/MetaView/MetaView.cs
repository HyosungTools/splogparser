using Contract;
using Impl;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Data;
using System.IO;
using System.Linq;
using static System.Collections.Specialized.BitVector32;

namespace MetaView
{
   [Export(typeof(IView))]
   public class MetaView : BaseView, IView
   {
      /// <summary>
      /// Constructor
      /// </summary>
      MetaView() : base(ParseType.Meta, "MetaView") { }


      /// <summary>
      /// Creates a MetaTable instance. 
      /// </summary>
      /// <param name="ctx">Context for the command. </param>
      /// <returns>BeeHDTable</returns>
      protected override BaseTable CreateTableInstance(IContext ctx)
      {
         // read this view's table
         MetaTable installTable = new MetaTable(ctx, viewName);
         installTable.ReadXmlFile();

         return installTable;
      }

      public override void Process(IContext ctx)
      {
         if (ctx.activeHandler == null)
         {
            ctx.ConsoleWriteLogLine("MetaView: active log handler is null.");
            return;
         }

         /*
         MetaLogHandler MetalogHandler = (ctx.activeHandler as MetaLogHandler);

         // process all the log lines
         base.Process(ctx);

         // writes SIP session summary lines to the output log

         ctx.ConsoleWriteLogLine(MetalogHandler.LogSummary());

         foreach (string summary in MetalogHandler.SessionSummaries())
         {
            ctx.ConsoleWriteLogLine(summary);
         }
         */
      }

      public override void PostProcess(IContext ctx)
      {
         // write the MetaView table(s) built out to file
         // bTable.WriteXmlFile();

         base.PostProcess(ctx);

         /*
         if (MetaLine.SipSessionTables() == null)
         {
            return;
         }

         // write additional XML files, one per SIP session
         try
         {
            foreach (System.Data.DataTable table in MetaLine.SipSessionTables())
            {
               // writes SIP Session timeline-buckets to XML, for output to Excel worksheets
               // the main XML is output below, after this loop
               //
               // MetaView_Session_0.xsd  (to _n)   - written only if there were SIP sessions
               // MetaView_Session_0.xml
               // MetaView.xsd
               // MetaView.xml

               if (table.Rows.Count == 0)
               {
                  continue;
               }

               // table name contains the day and time - it should be unique
               string outFileName = $"{ctx.WorkFolder}\\{viewName}_{table.TableName}";
               string outFile = string.Empty;

               try
               {
                  outFile = $"{outFileName}.xsd";
                  ctx.ConsoleWriteLogLine(String.Format("Write out SIP Session data schema to '{0}'", outFile));
                  table.WriteXmlSchema(outFile);

                  outFile = $"{outFileName}.xml";
                  ctx.ConsoleWriteLogLine(String.Format("Write out SIP Session data set to '{0}'", outFile));
                  table.WriteXml(outFile, XmlWriteMode.WriteSchema);
               }
               catch (InvalidOperationException ex)
               {
                  //  a column type in the DataRow being written/read implements IDynamicMetaObjectProvider 
                  // and does not implement IXmlSerializable.
                  ctx.ConsoleWriteLogLine($">>>EXCEPTION BeeHDView.PostProcess invalid operation writing {outFile} : " + ex.Message);
               }
               catch (Exception ex)
               {
                  // unknown exception 
                  ctx.ConsoleWriteLogLine($">>>EXCEPTION BeeHDView.PostProcess writing {outFile} : " + ex.Message);
               }
            }
         }
         catch (Exception ex)
         {
            // there are no session summaries
            ctx.ConsoleWriteLogLine(">>>EXCEPTION BeeHDView.PostProcess Processing SessionSummaries : " + ex.Message);
         }
         */
      }

      public override void Analyze(IContext ctx)
      {
         Dictionary<string, MachineTime> MachineTimes = new Dictionary<string, MachineTime>();
         List<MachineTime> MachineTimesList = new List<MachineTime>();

         ctx.ConsoleWriteLogLine("------------------------------------------------");
         ctx.ConsoleWriteLogLine("Analyze: " + viewName);

         // get this view's table instance
         MetaTable bTable = (MetaTable) CreateTableInstance(ctx);

         // load up the xml files generated by the other Views
         DataSet queryDS = bTable.ReadXmlFilesForQuery();


         using (queryDS)
         {
            try
            {
               DataTable atmRequests = queryDS.Tables["ServerHttpRequests"];
               DataTable serverRequests = queryDS.Tables["ATServer"];
               //DataTable teller = combinedDataSet.Tables["Workstation"];

               if (atmRequests.AsEnumerable() != null && serverRequests.AsEnumerable() != null)
               {
                  var query =
                      from atm in atmRequests.AsEnumerable()
                      join server in serverRequests.AsEnumerable()
                      on atm.Field<string>("AssetName") equals server.Field<string>("AssetName")
                      where atm.Field<string>("AssetName") != ""
                      select new
                      {
                         Timestamp =
                              server.Field<string>("time"),
                         AssetName =
                              atm.Field<string>("AssetName"),
                         FlowPoint =
                              atm.Field<string>("flowpoint"),
                         TellerName =
                              server.Field<string>("teller")
                      };


                  string tableName = "MetaStory";

                  foreach (var line in query)
                  {
                     ctx.ConsoleWriteLogLine($"{line.AssetName}\t{line.FlowPoint}\t{line.Timestamp}\t{line.TellerName}");

                     // add a row to this view's table
                     DataRow dataRow = bTable.dTableSet.Tables[tableName].Rows.Add();

                     dataRow["file"] = string.Empty;
                     dataRow["time"] = line.Timestamp;
                     dataRow["story"] = $"{line.AssetName}\t{line.FlowPoint}\t{line.Timestamp}\t{line.TellerName}";
                  }

                  bTable.dTableSet.Tables[tableName].AcceptChanges();

                  foreach (MachineTime mt in MachineTimesList)
                  {
                     ctx.ConsoleWriteLogLine($"\t{mt.LogSourceMachine}\t{mt.LogLineTime}\t{mt.InputRawTimestamp}\t{mt.TimeSourceMachine}\t{mt.SourceMachineLocalTime}\t{mt.InputTimeDifference}\t{mt.SourceMachineUtcTime}\t{mt.PayloadType}\t{mt.SourcePayload}");
                  }


                  // AV Server 'Startup'
                  /*

               try
               {
                  MachineTime machineTime = new MachineTime(DateTime.Parse(Timestamp), "ATServer", AssetName, "TellerSessionRequest", m.Groups["json"].Value);

                  MachineTimesList.Add(machineTime);

                  //MachineTimes.Add(machineTime.LogSourceMachine, machineTime);
               }
               catch (Exception ex)
               {
                  // failed format - ignore for now
               }
                   */

                  /* MoniPlus2sExtension
                  try
                  {
                     MachineTime machineTime = new MachineTime(DateTime.Parse(Timestamp), AssetName, AssetName, RestResource, MessageBody);

                     if (machineTime.IsValid)
                     {
                        MachineTimesList.Add(machineTime);

                        //MachineTimes.Add(machineTime.LogSourceMachine, machineTime);
                     }
                  }
                  catch (Exception ex)
                  {
                     // failed format - ignore for now
                  }
                  */

                  // ServerRequest
                  /*
                     // messages contain clues to the times on Server and ATM machines.  Teller workstation does not have such timestamp, another method must be used.
                     //
                     // ParseType (use to identify the type of machine where the log was generated)
                     // Sent/Receive (message direction indicates the source and destination machines)
                     //
                     // RECEIVED AT ATM FROM SERVER
                     //(ActiveTellerAgent_20231104_030107.log)           2023-11-04 10:45:07 Server message data {"Id":34442,"AssetName":"NM000562","TellerSessionRequestId":43278,"Timestamp":"2023-11-04T09:48:07.4570066-07:00","TellerInfo":{"ClientSessionId":5140,"TellerName":"Jorge","VideoConferenceUri":"192.168.20.142","TellerId":"jocadena"}}
                     //(ActiveTellerAgentExtensions_20231104_030107.log) 2023-11-04 10:45:07 [MoniPlus2sExtension] Sending TellerSession to application: {"Id":34442,"AssetName":"NM000562","TellerSessionRequestId":43278,"Timestamp":"2023-11-04T09:48:07.4570066-07:00","TellerInfo":{"ClientSessionId":5140,"TellerName":"Jorge","VideoConferenceUri":"192.168.20.142","TellerId":"jocadena"}}
                     //
                     //(ActiveTellerAgent_20231104_030107.log)           2023-11-04 11:06:20 Server message data {"TaskId":9,"TaskName":"ScanIdTask","EventName":"ScanIdRequest","Data":"{\"Name\":\"ScanIdRequest\",\"TellerId\":null,\"DateTime\":\"2023-11-04T10:09:20.7777751-07:00\",\"TaskTimeout\":null}","Id":228115,"AssetName":"NM000562","TellerSessionId":34462,"TransactionDetail":null,"Timestamp":"2023-11-04T10:09:20.7827608-07:00","TellerInfo":{"ClientSessionId":5140,"TellerName":"Jorge","VideoConferenceUri":"192.168.20.142","TellerId":"jocadena"}}
                     //(ActiveTellerAgentExtensions_20231104_030107.log) 2023-11-04 11:06:20 [MoniPlus2sExtension] Sending RemoteControlTaskMessage to application: {"AssetName":"NM000562","TaskId":9,"TaskName":"ScanIdTask","EventName":"ScanIdRequest","EventData":"{\"Name\":\"ScanIdRequest\",\"TellerId\":null,\"DateTime\":\"2023-11-04T10:09:20.7777751-07:00\",\"TaskTimeout\":null}","Extras":null,"TransactionData":null,"TellerInfo":{"ClientSessionId":5140,"TellerName":"Jorge","VideoConferenceUri":"192.168.20.142","TellerId":"jocadena"}}
                     //
                     // ATM RESPONSE SENT TO SERVER (with FlowPoint)
                     //                                                  2023-11-04 11:06:26 [MoniPlus2sExtension] Firing agent message event: RemoteControlEvent - POST - {"TaskId":9,"TaskName":"ScanIdTask","EventName":"IdScanCompleted","Data":"{\"Name\":\"IdScanCompleted\",\"Detail\":\"OK\",\"TransactionDetail\":{\"Accounts\":null,\"Id\":0,\"TellerSessionActivityId\":0,\"TransactionType\":null,\"ApproverId\":null,\"IdScans\":[{\"BackImageName\":null,\"BackImageRelativeUri\":null,\"FrontImageName\":\"C:\\\\IDSImages\\\\FRONT_20231104_110620.JPG\",\"FrontImageRelativeUri\":null,\"ScanIndex\":0,\"Id\":0,\"TransactionDetailId\":0,\"Review\":null}],\"Checks\":null,\"TransactionCashDetails\":null,\"TransactionOtherAmounts\":null,\"TransactionWarnings\":null}}","Id":0,"AssetName":"NM000562","TellerSessionId":34462,"TransactionDetail":{"Accounts":null,"Id":0,"TellerSessionActivityId":0,"TransactionType":null,"ApproverId":null,"IdScans":[{"BackImageName":null,"BackImageRelativeUri":null,"FrontImageName":"C:\\IDSImages\\FRONT_20231104_110620.JPG","FrontImageRelativeUri":null,"ScanIndex":0,"Id":0,"TransactionDetailId":0,"Review":null}],"Checks":null,"TransactionCashDetails":null,"TransactionOtherAmounts":null,"TransactionWarnings":null},"Timestamp":"2023-11-04T11:06:26.219672-07:00","TellerInfo":{"ClientSessionId":5140,"TellerName":null,"VideoConferenceUri":null,"TellerId":null}}
                     //
                     // TELLER SENT TO ATM VIA THE SERVER
                     //(Workstation20231104.log.1210.bak)                [2023-11-04 11:09:20-839][3][OnExecute           ]Executing ScanIdTask 9
                     //
                     // RECEIVED AT SERVER FROM TELLER
                     //???
                     //
                     // SENT BY SERVER TO ATM
                     //???
                     //
                     // RECEIVED AT WORKSTATION FROM SERVER
                     //(Workstation20231104.log.1210.bak)                [2023-11-04 11:09:26-593][3][DataFlowManager     ]Received IdScanCompleted event for ScanIdTask 9 for asset NM000562
                     //
                     // ATM RESPONSE SENT TO SERVER (with FlowPoint)
                     //2023-11-04 11:06:26 [MoniPlus2sExtension] Firing agent message event: RemoteControlEvent - POST - {"TaskId":9,"TaskName":"ScanIdTask","EventName":"IdScanCompleted","Data":"{\"Name\":\"IdScanCompleted\",\"Detail\":\"OK\",\"TransactionDetail\":{\"Accounts\":null,\"Id\":0,\"TellerSessionActivityId\":0,\"TransactionType\":null,\"ApproverId\":null,\"IdScans\":[{\"BackImageName\":null,\"BackImageRelativeUri\":null,\"FrontImageName\":\"C:\\\\IDSImages\\\\FRONT_20231104_110620.JPG\",\"FrontImageRelativeUri\":null,\"ScanIndex\":0,\"Id\":0,\"TransactionDetailId\":0,\"Review\":null}],\"Checks\":null,\"TransactionCashDetails\":null,\"TransactionOtherAmounts\":null,\"TransactionWarnings\":null}}","Id":0,"AssetName":"NM000562","TellerSessionId":34462,"TransactionDetail":{"Accounts":null,"Id":0,"TellerSessionActivityId":0,"TransactionType":null,"ApproverId":null,"IdScans":[{"BackImageName":null,"BackImageRelativeUri":null,"FrontImageName":"C:\\IDSImages\\FRONT_20231104_110620.JPG","FrontImageRelativeUri":null,"ScanIndex":0,"Id":0,"TransactionDetailId":0,"Review":null}],"Checks":null,"TransactionCashDetails":null,"TransactionOtherAmounts":null,"TransactionWarnings":null},"Timestamp":"2023-11-04T11:06:26.219672-07:00","TellerInfo":{"ClientSessionId":5140,"TellerName":null,"VideoConferenceUri":null,"TellerId":null}}
                     //2023-09-25 00:26:19 [MoniPlus2sExtension] Firing agent message event: ApplicationState - POST - {"Id":0,"AssetName":"NM000559","ApplicationAvailability":0,"Customer":{"CustomerId":""},"Timestamp":"2023-09-25T00:26:19.0346019-07:00","FlowPoint":"Common-InsertCardRead","State":"Identification","OperatingMode":"SelfService","TransactionType":"","Language":"English","VoiceGuidance":false}
                     //2023-09-25 00:26:41 [MoniPlus2sExtension] Firing agent message event: ApplicationState - POST - {"Id":0,"AssetName":"NM000559","ApplicationAvailability":0,"Customer":{"CustomerId":"0009754489"},"Timestamp":"2023-09-25T00:26:41.1266685-07:00","FlowPoint":"Common-DetermineDoYouWantBalanceInquiry","State":"Identification","OperatingMode":"SelfService","TransactionType":"CustomerIdentification","Language":"English","VoiceGuidance":false}
                     //
                     // RECEIVED AT SERVER FROM ATM (has FlowPoint)
                     //(ActiveTellerServer_20231128_010002.log)          2023-11-28 08:01:11 TellerRequestManager.HandleTellerSessionRequest handled tellerRequest {"Id":23565,"AssetName":"21PLEA04D","Timestamp":"2023-11-28T08:01:13.3746831-06:00","CustomerId":"0000632448","CustomerName":"PHILLIPS,CAMERON","FlowPoint":"Common-RequestAssistance","RequestContext":"HelpButton","ApplicationState":"MainMenu","TransactionType":"","Language":"English","VoiceGuidance":false,"RoutingProfile":{"SupportedCallType":"BeeHD"}}
                     //
                     // RECEIVED AT SERVER FROM ATM
                     //(ActiveTellerServer.log)                          2023-10-16 08:48:11 Get - /activeteller/api/TellerActivities?userid=20&start=2023-10-16T00%3a00%3a00.000-06%3a00&end=2023-10-16T23%3a59%3a59.000-06%3a00
                     //(ActiveTellerServer.log)                          2023-10-16 08:48:17 The following exception occurred while processing teller activity detail to display:
                                                                           System.ArgumentNullException: Value cannot be null.
                                                                           Parameter name: format
                                                                              at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)
                                                                              at NH.ActiveTeller.Server.Observers.TellerSessionJournalWriter.BuildActivityDescription(TellerActivity tellerActivity)
                                                                              at NH.ActiveTeller.Server.Providers.TellerActivityProvider.MapRecordToModel(TellerJournalRecord record)
                                                                           {"Id":357996,"ActivityDescription":"Teller session start","ActivityDetail":null,"ActivityDetailToDisplay":"TellerSession_Insert_Withdrawal","ActivityName":"Withdrawal","ActivityState":"Insert","ActivityType":"TellerSession","AssetName":"TX005019","BranchName":"Zaragoza","BranchNumber":"310","ClientSessionId":4541,"CustomerName":"DURAN,ARLEEN","SourceApplication":2,"SystemActivity":0,"TellerControlTaskId":null,"TellerSessionId":29411,"Timestamp":"2023-10-16T08:07:23.92","UserId":20,"UserName":"kpetroni"}
                                                                           {"Id":358016,"ActivityDescription":"Teller session start","ActivityDetail":null,"ActivityDetailToDisplay":"TellerSession_Insert_PostIdle","ActivityName":"PostIdle","ActivityState":"Insert","ActivityType":"TellerSession","AssetName":"TX005016","BranchName":"Lee Trevino","BranchNumber":"305","ClientSessionId":4541,"CustomerName":"","SourceApplication":2,"SystemActivity":0,"TellerControlTaskId":null,"TellerSessionId":29414,"Timestamp":"2023-10-16T08:19:53.743","UserId":20,"UserName":"kpetroni"}
                     //
                     // SENT TO WORKSTATION FROM SERVER
                     //???

                     // AT SERVER
                     //   TellerRequestManager
                       2023-11-17 08:00:58 TellerRequestManager.HandleTellerSessionRequest is using RoutingRule.PREFER_BRANCH for tellerRequest from 21PLEA03D
                       2023-11-17 08:00:58 TellerRequestManager.HandleTellerSessionRequest handled tellerRequest {"Id":20055,"AssetName":"21PLEA03D","Timestamp":"2023-11-17T08:01:02.043053-06:00","CustomerId":"","CustomerName":"","FlowPoint":"Common-RequestAssistance","RequestContext":"HelpButton","ApplicationState":"PostIdle","TransactionType":"","Language":"English","VoiceGuidance":false,"RoutingProfile":{"SupportedCallType":"BeeHD"}}




                     2023-11-28 10:51:14 Get - /ActiveTeller/api/v2/TellerTransactions?userid=2%2c3%2c12%2c5%2c6%2c8%2c4%2c20%2c27%2c29%2c34%2c36%2c26%2c28%2c22%2c35%2c14%2c24%2c37%2c38%2c43%2c39%2c15%2c42%2c16%2c31%2c33%2c45%2c40%2c44%2c46%2c41%2c52%2c51%2c47%2c54%2c55%2c48%2c53%2c49%2c50%2c56&assetname=12PROS04D%2c14STUR02L%2c12PROS01L%2c14STUR05D%2c18OAKCRK01L%2c21PLEA01L%2c21PLEA02L%2c09KENO02D%2c05APP01L%2c07LOO01D%2c09KENO01D%2c12PROS03D%2c21PLEA03D%2c14STUR03D%2c18OAKCRK03D%2c16CENT04D%2c16CENT06D%2c18OAKCRK04D%2c14STUR01L%2c09KENO03D%2c18OAKCRK02L%2c12PROS02L%2c25MUK02D%2c14STUR04D%2c25MUK01L%2c21PLEA04D%2c16CENT01L%2c27MTSIN01L&start=2023-11-27T00%3a00%3a00.000-06%3a00&end=2023-11-27T23%3a59%3a59.000-06%3a00&transactionstatus=1,2

   ActiveTellerServer_20231128_010002.log
   2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: OnConnected event fired.
   2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: UpdateTellerSessionStatisticsSubscription was called with True
   2023-11-28 08:27:33 UpdateSubscriptionForSelections: clientSessionId: 4292, old: 0, new: 29
   2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: Connection was added to the connectionMap. Count=35
   2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: Connection was added to the clientSessionMap for clientSessionId 4292. Count=8
   2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: starting SendOpenTellerSessionRequests
   2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: finishing SendOpenTellerSessionRequests
   2023-11-28 08:27:33 SetTellerAvailability was called with available for client session 4292.
   2023-11-28 08:27:33 [BEFORE] RemotePool.FireResourceAvailable - tellerResource.Id = 4292; UnavailableResources.Count = 0; AssignedList.Count = 0; AvailableResources.Count = 7
   2023-11-28 08:27:33 [AFTER] RemotePool.FireResourceAvailable - tellerResource.Id = 4292; UnavailableResources.Count = 0; AssignedList.Count = 0; AvailableResources.Count = 8
   ..
   2023-11-28 11:01:28 Connection c421f779-9a47-4f3b-848b-f894dfa6cbdd: Connection was updated in the connectionMap. Count=37
   2023-11-28 11:01:28 Connection c421f779-9a47-4f3b-848b-f894dfa6cbdd: Connection was updated in the assetMap for '12PROS04D'. Count=27
   2023-11-28 11:01:28 Post - /ActiveTeller/api/tellersessionrequests
   2023-11-28 11:01:28 TerminalProfileHoursPolicy.Find - Asset 25 is currently in terminal profile hours 1: returning RoutingRule.PREFER_BRANCH.
   2023-11-28 11:01:28 TellerRequestManager.HandleTellerSessionRequest is using RoutingRule.PREFER_BRANCH for tellerRequest from 12PROS04D
   2023-11-28 11:01:28 Client session 4292 can handle the request from 12PROS04D
   2023-11-28 11:01:28 TellerRequestManager.HandleTellerSessionRequest handled tellerRequest {"Id":23660,"AssetName":"12PROS04D","Timestamp":"2023-11-28T11:01:32.2281847-06:00","CustomerId":"","CustomerName":"","FlowPoint":"Common-RequestAssistance","RequestContext":"HelpButton","ApplicationState":"PostIdle","TransactionType":"","Language":"English","VoiceGuidance":false,"RoutingProfile":{"SupportedCallType":"BeeHD"}}
   2023-11-28 11:01:29 Post - /ActiveTeller/api/remotecontroltasks
   2023-11-28 11:01:29 Post - /ActiveTeller/api/remotecontrolevents
   2023-11-28 11:01:33 Put - /ActiveTeller/api/applicationstates/5

   Workstation20231128.log
   [2023-11-28 11:01:28-311][3][DataFlowManager     ]Teller session request 23660 for asset 12PROS04D
   [2023-11-28 11:01:28-311][3][MainWindow          ]Teller session requested for asset 12PROS04D for teller session request 23660. IsAcceptable=True. 
   [2023-11-28 11:01:28-327][3][ConnectionManager   ]Update teller session statistics: Pending=1 Current=4
   [2023-11-28 11:01:28-327][3][DataFlowManager     ]Teller session statistics update received
   [2023-11-28 11:01:29-643][3][DataFlowManager     ]Received ItemsTaken event for DispenseTask 25 for asset 16CENT06D
   [2023-11-28 11:01:29-644][3][WithdrawalTaskHandler]OnItemsTaken started.
   [2023-11-28 11:01:29-644][3][WithdrawalTaskHandler]AddReceiptList started.
   [2023-11-28 11:01:29-645][3][WithdrawalTaskHandler]InitializeData started.
   [2023-11-28 11:01:29-646][3][WithdrawalTaskHandler]CheckForPartialDispense started.
   [2023-11-28 11:01:29-647][3][CompleteTask        ]Completing DispenseTask 25
   [2023-11-28 11:01:29-647][3][CompleteTask        ]Completing DispenseTask 25
   [2023-11-28 11:01:33-174][3][MainWindow          ]BtnEndConference was clicked
   [2023-11-28 11:01:34-484][3][UIManager           ]BtnEndConference set to disabled and visible
   [2023-11-28 11:01:34-484][3][BeeHDVideoControl   ]StopVideoCall


                  if (dict.ContainsKey("AssetName"))
                     {
                        AssetName = (string)dict["AssetName"];
                     }

                     if (dict.ContainsKey("Timestamp"))
                     {
                        // if conversion to DateTime sees "ANY" timezone offset in the string .NET adjusts the result to LocalTime
                        // FOR THE MACHINE ON WHICH THIS PARSER IS RUNNING, not the source machine of the log file
                        string wonkyTimestamp_DONOTUSE = dict["Timestamp"].ToString();

                        try
                        {
                           MachineTime machineTime = new MachineTime(DateTime.Parse(Timestamp), AssetName, AssetName, requestType.ToString(), Payload);

                           MachineTimesList.Add(machineTime);

                           //MachineTimes.Add(machineTime.LogSourceMachine, machineTime);
                        }
                        catch (Exception ex)
                        {
                           // failed format - ignore for now
                        }
                     }

                   */


                  // update logInfo and return
                  ctx.ConsoleWriteLogLine("End Analyze: " + viewName);
               }
            }
            catch (Exception ex)
            {
               ctx.ConsoleWriteLogLine(String.Format("EXCEPTION : dataset query : {0}", ex.Message));
            }
         }

         ctx.LogWriteLine("------------------------------------------------");
         ctx.LogWriteLine("Write XML query results: " + viewName);

         bTable.WriteXmlFile();
      }

      public override void Cleanup(IContext ctx)
      {
         base.Cleanup(ctx);

         /*
         // delete the SIP session XML/XSD files
         foreach (System.Data.DataTable table in MetaLine.SipSessionTables())
         {
            try
            {
               // table name contains the day and time - it should be unique
               string outFileName = $"{ctx.WorkFolder}\\{viewName}_{table.TableName}";

               string outFileToDelete = $"{outFileName}.xsd";
               if (File.Exists(outFileToDelete))
               {
                  ctx.ConsoleWriteLogLine("Deleting file : " + outFileToDelete);
                  File.Delete(outFileToDelete);
               }

               outFileToDelete = $"{outFileName}.xml";
               if (File.Exists(outFileToDelete))
               {
                  ctx.ConsoleWriteLogLine("Deleting file : " + outFileToDelete);
                  File.Delete(outFileToDelete);
               }
            }
            catch (Exception ex)
            {
               // there are no session summaries
               ctx.ConsoleWriteLogLine(">>>EXCEPTION BeeHDView.Cleanup Processing SipSessionTables : " + ex.Message);
            }
         }

         MetaLine.ReleaseSipSessionTables();

         */
      }
   }
}

