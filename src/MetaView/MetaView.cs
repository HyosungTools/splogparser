using Contract;
using Impl;
using Microsoft.Office.Core;
using Microsoft.Office.Interop.Excel;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Data;
using System.Diagnostics.Contracts;
using System.IO;
using System.Linq;
using System.Xml.Linq;
using static System.Collections.Specialized.BitVector32;

namespace MetaView
{
   [Export(typeof(IView))]
   public class MetaView : BaseView, IView
   {
      /// <summary>
      /// Constructor
      /// </summary>
      MetaView() : base(ParseType.Meta, "MetaView") { }


      /// <summary>
      /// Creates a MetaTable instance. 
      /// </summary>
      /// <param name="ctx">Context for the command. </param>
      /// <returns>BeeHDTable</returns>
      protected override BaseTable CreateTableInstance(IContext ctx)
      {
         // read this view's table
         MetaTable installTable = new MetaTable(ctx, viewName);
         installTable.ReadXmlFile();

         return installTable;
      }

      public override void Analyze(IContext ctx)
      {
         Dictionary<string, MachineTime> MachineTimes = new Dictionary<string, MachineTime>();
         List<MachineTime> MachineTimesList = new List<MachineTime>();

         ctx.ConsoleWriteLogLine("------------------------------------------------");
         ctx.ConsoleWriteLogLine("Analyze: " + viewName);

         // get this view's table instance
         MetaTable bTable = (MetaTable)CreateTableInstance(ctx);

         // load up the xml files generated by the other Views
         DataSet queryDS = bTable.ReadXmlFilesForQuery();

         // TODO QUERIES:
         //
         //   identify the workstation, teller name, terminal name, time range of interest
         //
         //
         //   track BeeHD calls between ATM and workstation, within a time range using
         //   CallID, and using IP ADDRESSES, OTHER CLUES.  Secondary goal to make the
         //   time adjustment.
         //    PREREQUISITE:  ATM and Teller logs covering the desired time range must be available
         //
         //   possibly using the above, track ATM request for service to the server,
         //   server assigning a remote request session to a teller, teller connecting to
         //   the ATM.  Secondary goal to make the time adjustment.
         //
         // ASSEMBLING A LOG SET:   (GSCJSD-9103)
         // 
         //   either put only log files of interest in a folder to analyze, or identify the
         //   source time range for command line arguments:    --timestart 202311040600 --timespan 1440
         //
         //   (complicated by need to know the timezone offsets for each machine)
         //   run an initial scan of the log folder, identify which files cover a common source time range, put this into a table
         //   

         //* 1.  find all TellerSessionRequests in ActiveTellerAgent[Extensions]
         //* 2.  find all TellerSessionRequests in ActiveTellerServer
         //* 3.  JOIN (1) and (2) on TellerSessionRequestId to get ones in common
         //* 4.  harvest ClientSessionId from TellerInfo
         //* 5.  search workstation 'Teller session request <clientsessionid>'
         //* 6.  search server 'Client session <clientsessionid>'
         //* 7.  harvest machine IP addresses
         //* 8.  for beehd - match IP addresses until 200 OK, then Call-Id

         /*
          * "TellerSessionRequest"
          * TellerSessionRequestId found in MoniPlus2sEvents, ServerHttpRequests
          * ActiveTellerAgentExtensions_20231120_030031.log	2023-11-20 07:41:00.000	2023-11-20 07:41:00 [MoniPlus2sExtension] Sending TellerSession to application: {"Id":570,"AssetName":"A060318","TellerSessionRequestId":1271,"Timestamp":"2023-11-20T07:41:50.1857474-06:00","TellerInfo":{"ClientSessionId":1129,"TellerName":"Joseph","VideoConferenceUri":"10.20.40.106","TellerId":"jsmith"}}							Active		0					FALSE					A060318			jsmith	Joseph	10.20.40.106	ClientSessionId:1129;TellerName:Joseph;VideoConferenceUri:10.20.40.106;TellerId:jsmith;	2023-11-20 01:41:50.186									0																																																			SENDING	TellerSession	{"Id":570,"AssetName":"A060318","TellerSessionRequestId":1271,"Timestamp":"2023-11-20T07:41:50.1857474-06:00","TellerInfo":{"ClientSessionId":1129,"TellerName":"Joseph","VideoConferenceUri":"10.20.40.106","TellerId":"jsmith"}}			0	0	0	0	0	0	0	0	0	570	1271	1129									0		
          * ActiveTellerAgent_20231120_030031.log	2023-11-20 07:41:00.000	{"Id":570,"AssetName":"A060318","TellerSessionRequestId":1271,"Timestamp":"2023-11-20T07:41:50.1857474-06:00","TellerInfo":{"ClientSessionId":1129,"TellerName":"Joseph","VideoConferenceUri":"10.20.40.106","TellerId":"jsmith"}}	Message received								2023-11-20 01:41:50.186	1129	A060318	570	Joseph	jsmith	10.20.40.106								
          * 
          * ActiveTellerAgentExtensions_20231120_030031.log	2023-11-20 07:41:59.000	2023-11-20 07:41:59 [MoniPlus2sExtension] Sending TellerSession to application: {"Id":571,"AssetName":"A060318","TellerSessionRequestId":1272,"Timestamp":"2023-11-20T07:42:48.793208-06:00","TellerInfo":{"ClientSessionId":1129,"TellerName":"Joseph","VideoConferenceUri":"10.20.40.106","TellerId":"jsmith"}}							Active		0					FALSE					A060318			jsmith	Joseph	10.20.40.106	ClientSessionId:1129;TellerName:Joseph;VideoConferenceUri:10.20.40.106;TellerId:jsmith;	2023-11-20 01:42:48.793									0																																																			SENDING	TellerSession	{"Id":571,"AssetName":"A060318","TellerSessionRequestId":1272,"Timestamp":"2023-11-20T07:42:48.793208-06:00","TellerInfo":{"ClientSessionId":1129,"TellerName":"Joseph","VideoConferenceUri":"10.20.40.106","TellerId":"jsmith"}}			0	0	0	0	0	0	0	0	0	571	1272	1129									0		
          * ActiveTellerAgent_20231120_030031.log	2023-11-20 07:41:59.000	{"Id":571,"AssetName":"A060318","TellerSessionRequestId":1272,"Timestamp":"2023-11-20T07:42:48.793208-06:00","TellerInfo":{"ClientSessionId":1129,"TellerName":"Joseph","VideoConferenceUri":"10.20.40.106","TellerId":"jsmith"}}	Message received								2023-11-20 01:42:48.793	1129	A060318	571	Joseph	jsmith	10.20.40.106								
          *
          * --tellerrequest xxxx
          * 
          * "TellerSessionRequest", "1271"
          * ActiveTellerServer_20231120_010002.log	2023-11-20 07:41:43.000	2023-11-20 07:41:43 TellerRequestManager.HandleTellerSessionRequest handled tellerRequest {"Id":1271,"AssetName":"A060318","Timestamp":"2023-11-20T07:40:53.7231589-06:00","CustomerId":"","CustomerName":"","FlowPoint":"Common-RequestAssistance","RequestContext":"HelpButton","ApplicationState":"PostIdle","TransactionType":"","Language":"English","VoiceGuidance":false,"RoutingProfile":{"SupportedCallType":"BeeHD"}}		2023-11-20 08:40:53.723			A060318	A060318		1271		 	PostIdle Common-RequestAssistance HelpButton 			TellerRequestManager.HandleTellerSessionRequest handled tellerRequest {"Id":1271,"AssetName":"A060318","Timestamp":"2023-11-20T07:40:53.7231589-06:00","CustomerId":"","CustomerName":"","FlowPoint":"Common-RequestAssistance","RequestContext":"HelpButton","ApplicationState":"PostIdle","TransactionType":"","Language":"English","VoiceGuidance":false,"RoutingProfile":{"SupportedCallType":"BeeHD"}}			
          * ActiveTellerServer_20231120_010002.log	2023-11-20 07:42:13.000	2023-11-20 07:42:13 Delete - /ActiveTeller/api/tellersessionrequests/1271			DELETE	 /ActiveTeller/api/tellersessionrequests/1271													
          *
          *
          * --teller jsmith or --teller x.x.x.x
          * --assetname A060318 or --asset x.x.x.x
          * 
          * "A060318" - very fruitful, lots of lines, multiple sheets (ATServer, MoniPlus, ServerCommunication, ServerHttpRequests, ATServer, NOT WORKSTATION
          * "jsmith" - very fruitful, found in bee log, workstation, moniplus (agent, agentextension)
          *    identify a call, search by Call-Id "3909be05-3fafd4aa-c0c6-1aeca1b0-ad0320a-13c4-65015" (WON'T WORK FOR SOME NETWORKS)
          * 
          * -- clientsession xxxx
          * 
          * "ClientSessionId"
          *   ClientSessionId can be tracked workstation-server-ATM
          *   IP addresses, ATM asset name can be established
          *   TellerId can be confirmed
          *   Time sync can be made
**        * "1129" (each teller-ATM interaction has a different ClientSessionId, incremented sequentially on the workstation)
          * Workstation
          * [2023-11-03 11:23:06-255][3][DataFlowManager     ]Teller session request 1129 for asset A060306
          * [2023-11-03 11:23:06-256][3][MainWindow          ]Teller session requested for asset A060306 for teller session request 1129. IsAcceptable=True. 
          * [2023-11-03 11:23:08-834][3][DataFlowManager     ]Teller session request 1129 for asset A060306 deleted
          * ActiveTellerAgent (TellerSessionRequestId, ClientSessionId)
          * 2023-11-20 07:41:00 Server message data {"Id":570,"AssetName":"A060318","TellerSessionRequestId":1271,"Timestamp":"2023-11-20T07:41:50.1857474-06:00","TellerInfo":{"ClientSessionId":1129,"TellerName":"Joseph","VideoConferenceUri":"10.20.40.106","TellerId":"jsmith"}}
	       * 2023-11-20 07:41:59 Server message data {"Id":571,"AssetName":"A060318","TellerSessionRequestId":1272,"Timestamp":"2023-11-20T07:42:48.793208-06:00","TellerInfo":{"ClientSessionId":1129,"TellerName":"Joseph","VideoConferenceUri":"10.20.40.106","TellerId":"jsmith"}}
          * ActiveTellerAgentExtension (ClientSessionId)
          * 2023-11-20 07:41:00 [MoniPlus2sExtension] Sending TellerSession to application: {"Id":570,"AssetName":"A060318","TellerSessionRequestId":1271,"Timestamp":"2023-11-20T07:41:50.1857474-06:00","TellerInfo":{"ClientSessionId":1129,"TellerName":"Joseph","VideoConferenceUri":"10.20.40.106","TellerId":"jsmith"}}
          * 2023-11-20 07:41:59 [MoniPlus2sExtension] Sending TellerSession to application: {"Id":571,"AssetName":"A060318","TellerSessionRequestId":1272,"Timestamp":"2023-11-20T07:42:48.793208-06:00","TellerInfo":{"ClientSessionId":1129,"TellerName":"Joseph","VideoConferenceUri":"10.20.40.106","TellerId":"jsmith"}}
          * ActiveTellerServer (Client session xxxx terminal xxxxxxx
          * 2023-11-20 07:51:41 Put - /activeteller/api/clientsessions/1129
          * 2023-11-20 07:41:43 Client session 1129 can handle the request from A060318
          * 2023-11-20 07:41:43 TellerRequestManager.HandleTellerSessionRequest handled tellerRequest {"Id":1271,"AssetName":"A060318","Timestamp":"2023-11-20T07:40:53.7231589-06:00","CustomerId":"","CustomerName":"","FlowPoint":"Common-RequestAssistance","RequestContext":"HelpButton","ApplicationState":"PostIdle","TransactionType":"","Language":"English","VoiceGuidance":false,"RoutingProfile":{"SupportedCallType":"BeeHD"}}
          * 2023-11-20 07:41:50 Client session 1129 subscribed to asset A060318
          * 2023-11-20 07:41:50 SetTellerAvailability was called with busy for client session 1129.
          * 2023-11-20 07:42:13 Delete - /ActiveTeller/api/tellersessionrequests/1271
          * 2023-11-20 07:42:16 UpdateSubscriptionForSelections: clientSessionId: 1129, old: 16, new: 0
          * 2023-11-20 07:42:16 Connection e7cc558d-a65a-4c08-a049-064d1afaa2d7: Connection for client session '1129' was removed from the clientSessionMap. Count=1
          * 2023-11-20 07:42:44 Connection 7f0f583b-b846-4ff0-b744-ea72c2e30c7b: Connection was added to the clientSessionMap for clientSessionId 1129. Count=2
          * 2023-11-20 07:42:44 SetTellerAvailability was called with available for client session 1129.
          *    
          * for tracking signalr and api connections to the server from terminal or workstation..
          * --serverFBTW-ITM01=x.x.x.x  (or assume that any /activeteller is to the server we have - so build own map FBTW-ITM01 == x.x.x.x)
          * --signalr
          * --api
          * 
          * "activeteller/SignalR/signalr/"
          * workstation connecting to server:
          * [2023-11-03 09:59:42-832][3][ConnectionManager   ]ActiveTeller connection eb071a6c-3acb-46d1-aaab-36639e8aba67 connected to http://FBTW-ITM01/activeteller/SignalR/signalr/  
          * 
          * u_ex231106.log  (SignalR connect events)
          * 2023-11-06 13:17:00 10.201.33.12 GET /activeteller/SignalR/signalr/negotiate clientProtocol=1.4&connectionData=[%7B%22Name%22:%22ClientHub%22%7D] 80 - 10.20.40.72 SignalR.Client.NET45/2.2.2.0+(Microsoft+Windows+NT+6.2.9200.0) - 200 0 0 13
          * 2023-11-06 17:59:43 10.201.33.12 GET /activeteller/SignalR/signalr/reconnect clientProtocol=1.4&transport=serverSentEvents&connectionData=[%7B%22Name%22:%22ClientHub%22%7D]&connectionToken=SIVvGMkP7UrqSOXZD8lpPyCGD7KzhxVvGEz4dxKygqrtZqjY66p7m7WbwRpQVptZvvwaHRMbKv5XYWsWDAGJpX0n6QHfVo47Za4FrvZcDfQ6Jct9SvvlRGV326eGsNCy&messageId=d-CE5B12FA-B%2C0%7CCC%2C3%7CCD%2C12%7CBd%2C2%7CBe%2C0%7CBf%2C160%7CBg%2CEE%7CBh%2CA7%7CBi%2CA1%7CBj%2C3C7%7CBk%2C1FF%7CBl%2C180%7CBm%2C26D%7CBn%2C6A%7CBo%2C18A%7CBp%2CFC%7CBq%2C64%7CBr%2C124%7CBs%2CB2%7CBt%2CB&groupsToken=4LAVu5DOfwawXkrGWQX6czG6ODybbz66fmsylOHY3RVTa45SF8yuzkwM9LSRQS6Froj2OApbkeWhuMjm8Vt%2FPoTbBcER%2BVFFIq%2B9aeqQPJu2QYlNWr6B1JLFuzOmO%2FzjPfqjpMom0BCkQnW3e%2Bz81Wv9todF7B8xP9UBGCiZnl7%2Bwj%2BmhvevkjGBdiUyzRuuXL4CV1ka9len1%2FoBkwZ20I3k7V%2FwNWx6YzRQDxYMTLHN4bRMLkte1rWfCwkUx9R7v289KudLPIlrNREYd%2BO92MhFcbLTzDVDA7UCI0LHyHREN9SoI%2FAgAeJOPYPQ7HaRMN3Puk0Z%2BizHcT9FJw0kIomyAc7azcbHL8BxzT23EnRzFnbv41gEEd8XRoLfs7zoAKgKKZcJQC%2BXYNRxizcyaoRhhqCfhLbbyeEUhEwHMlpPz%2BJkM2izCDgYQJ8edttdJ7bOpXdayGF8qwabnn8%2BlFXehVX%2FTYHYd2WN0QU5RoJKCUfBnxgjhnhwWIaQBIVSr65L699eK1C7F%2FJlhYqcOnrOb0i5y46rzHwKdLx5RniYxCZGrMZratIDfc0lLkIsqvB0lC0%2BxE6BnVj52bOXSGXz8QyZ9GWExcouBPddW%2FZ%2FzHE3pNaqHu3DXJc5v870MWXSsd6%2FAZqvZABm4BqKhi4g9N3ldfZGBsYydgqvN%2BMKmyFNdxPwW6amyi45%2FJNyK5Me9Xi0msyOUhqpVOHpWxk5LKPVXrWii9M7bl5olcUXKaNdVKe0jZpiEuew%2FRIyicFBzUe9pgWYBj3suUxNQ6pDMRs4%2BWkQS8fObFMS2ZI%3D 80 - 10.20.36.73 SignalR.Client.NET45/2.2.2.0+(Microsoft+Windows+NT+6.2.9200.0) - 200 0 64 1446444
	       * 2023-11-06 17:59:45 10.201.33.12 POST /activeteller/SignalR/signalr/send clientProtocol=1.4&transport=serverSentEvents&connectionData=[%7B%22Name%22:%22ClientHub%22%7D]&connectionToken=SIVvGMkP7UrqSOXZD8lpPyCGD7KzhxVvGEz4dxKygqrtZqjY66p7m7WbwRpQVptZvvwaHRMbKv5XYWsWDAGJpX0n6QHfVo47Za4FrvZcDfQ6Jct9SvvlRGV326eGsNCy 80 - 10.20.36.73 SignalR.Client.NET45/2.2.2.0+(Microsoft+Windows+NT+6.2.9200.0) - 200 0 0 26
          *
          *
          * "A060318"  (works for ATMs, not tellers)
          * 2023-11-20 01:00:09 Connection 0d05ee55-a811-4cdf-af4f-df081358abd3: Connection was added to the assetMap for 'A060318'. Count=7
          * 
          * "/activeteller/api/clientsessions"
          * ActiveTellerServer
          * 2023-11-20 07:51:41 Put - /activeteller/api/clientsessions/1129
          * u_ex*.log
          * 2023-11-06 13:32:07 10.201.33.12 PUT /activeteller/api/clientsessions/1056 - 80 - 10.20.40.72 - - 200 0 0 69

          * 

          * 
          */

         string tableName = "MetaStory";

         using (queryDS)
         {
            //* 1.  find all TellerSessionRequests in ActiveTellerAgent[Extensions]
            //* 2a.  find all TellerSessionRequests in ActiveTellerServer
            //* 2b.  if ActiveTellerServer not available, get ClientSessionId and use it to match workstation
            //* 3.  JOIN (1) and (2) on TellerSessionRequestId to get ones in common

            try
            {
               string matchField = string.Empty;
               string queryDescription = string.Empty;

               System.Data.DataTable atmLog_HttpRequests = queryDS.Tables["ServerHttpRequests"];
               System.Data.DataTable serverLog = queryDS.Tables["ATServer"];
               System.Data.DataTable tellerLog = queryDS.Tables["Workstation"];
               System.Data.DataTable beehdLog = queryDS.Tables["BeeHDMessages"];

               // find INVITE CSEQ: 1 with CallIdHeader and Direction in both ATM and WORKSTATION logs

               if (beehdLog.AsEnumerable() != null)
               {
                  matchField = "CallIdHeader";
                  queryDescription = $"BeeHD Matching {matchField}";

                  var queryBeeHDMatchCallHeaderId =
                      from beehd in beehdLog.AsEnumerable()
                      where beehd.Field<string>("analysis") == "SIPSUMMARY"
                         && beehd.Field<string>(matchField) != ""
                         && beehd.Field<string>("msgheader") != ""
                         && beehd.Field<string>("cseqheader") != ""
                         && beehd.Field<string>("direction") != ""
                      select new
                      {
                         MachineType = beehd.Field<string>("machinetype"),
                         AtmFilename = beehd.Field<string>("file"),
                         AtmLine = beehd.Field<string>("linenumber"),
                         AtmTimestamp = beehd.Field<string>("time"),
                         TellerFilename = beehd.Field<string>("file"),
                         TellerLine = beehd.Field<string>("linenumber"),
                         TellerTimestamp = beehd.Field<string>("time"),

                         CallIdHeader = beehd.Field<string>(matchField),
                         MsgHeader = beehd.Field<string>("msgheader"),
                         CSeqHeader = beehd.Field<string>("cseqheader"),
                         Direction = beehd.Field<string>("direction")
                      };

                  foreach (var line in queryBeeHDMatchCallHeaderId)
                  {
                     AddBeeQueryRowToMetaTable(bTable.dTableSet.Tables[tableName], line, queryDescription);
                  }

                  bTable.dTableSet.Tables[tableName].AcceptChanges();

                  // now do another query on the table just generated, merging ATM and Teller lines for the same message
                  // into one line

                  System.Data.DataTable bothBees = bTable.dTableSet.Tables[tableName];

                  if (bothBees.AsEnumerable() != null)
                  {
                     var queryAtm = from beehd in bothBees.AsEnumerable()
                                     where beehd.Field<string>("machinetype").Equals("atm")
                                     orderby "time, line"
                                     select new
                                     {
                                        MachineType = beehd.Field<string>("machinetype"),
                                        AtmFilename = beehd.Field<string>("atmfile"),
                                        AtmLine = beehd.Field<string>("atmline"),
                                        AtmTimestamp = beehd.Field<string>("atmtime"),
                                        TellerFilename = beehd.Field<string>("tellerfile"),
                                        TellerLine = beehd.Field<string>("tellerline"),
                                        TellerTimestamp = beehd.Field<string>("tellertime"),

                                        CallIdHeader = beehd.Field<string>(matchField),
                                        MsgHeader = beehd.Field<string>("msgheader"),
                                        CSeqHeader = beehd.Field<string>("cseqheader"),
                                        Direction = beehd.Field<string>("direction")
                                     };

                     var queryTeller = from beehd in bothBees.AsEnumerable()
                                         where beehd.Field<string>("machinetype").Equals("teller")
                                         orderby "time, line"
                                         select new
                                         {
                                            MachineType = beehd.Field<string>("machinetype"),
                                            AtmFilename = beehd.Field<string>("atmfile"),
                                            AtmLine = beehd.Field<string>("atmline"),
                                            AtmTimestamp = beehd.Field<string>("atmtime"),
                                            TellerFilename = beehd.Field<string>("tellerfile"),
                                            TellerLine = beehd.Field<string>("tellerline"),
                                            TellerTimestamp = beehd.Field<string>("tellertime"),

                                            CallIdHeader = beehd.Field<string>(matchField),
                                            MsgHeader = beehd.Field<string>("msgheader"),
                                            CSeqHeader = beehd.Field<string>("cseqheader"),
                                            Direction = beehd.Field<string>("direction")
                                         };

                     // left outer join, matches lines on the left with lines on the right ... more rows than in the original queries
                     // can be created, to avoid that use an inner join - but how, in Linq?
                     //
                     // Or put the querySent and queryReceived into a loop and scan each row individually.

                     var querySentReceived = (from sent in queryAtm
                                              join received in queryTeller on sent.CallIdHeader equals received.CallIdHeader
                                              where sent.AtmFilename != received.TellerFilename
                                              select new
                                              {
                                                 // Filename and Timestamp fields should be null on one query, non-null in the other
                                                 AtmFilename = sent.AtmFilename + received.AtmFilename,
                                                 AtmLine = sent.AtmLine + received.AtmLine,
                                                 AtmTimestamp = sent.AtmTimestamp + received.AtmTimestamp,
                                                 TellerFilename = sent.TellerFilename + received.TellerFilename,
                                                 TellerLine = sent.TellerLine + received.TellerLine,
                                                 TellerTimestamp = sent.TellerTimestamp + received.TellerTimestamp,

                                                 CallIdHeader = sent.CallIdHeader,
                                                 MsgHeader = sent.MsgHeader,
                                                 CSeqHeader = sent.CSeqHeader,
                                                 Direction = "sent-received"
                                              }).Distinct();

                     foreach (var line in querySentReceived)
                     {
                        AddMergedBeeQueryRowToMetaTable(bTable.dTableSet.Tables[tableName], line, queryDescription);
                     }
                  }


                  // find matching RemoteTellerSessionRequestId in both ATM and SERVER logs

                  if (atmLog_HttpRequests.AsEnumerable() != null && serverLog.AsEnumerable() != null)
                  {
                     matchField = "SessionRequestId";
                     queryDescription = $"Atm & Server INNER JOIN {matchField}";

                     var queryAtmServerMatchSessionRequestId =
                         from atm in atmLog_HttpRequests.AsEnumerable()
                         join server in serverLog.AsEnumerable()
                         on atm.Field<string>(matchField) equals server.Field<string>(matchField)
                         where atm.Field<string>(matchField) != ""
                         select new
                         {
                            AtmFilename = atm.Field<string>("file"),
                            AtmTimestamp = atm.Field<string>("time"),
                            ServerFilename = server.Field<string>("file"),
                            ServerTimestamp = server.Field<string>("time"),
                            SessionRequestId = server.Field<string>("SessionRequestId"),
                            ClientSessionId = atm.Field<string>("ClientSessionId"),
                            AssetName = atm.Field<string>("AssetName"),
                            FlowPoint = atm.Field<string>("flowpoint"),
                            TellerName = server.Field<string>("teller")
                         };

                     foreach (var line in queryAtmServerMatchSessionRequestId)
                     {
                        AddQueryRowToMetaTable(bTable.dTableSet.Tables[tableName], line, queryDescription);
                     }

                     bTable.dTableSet.Tables[tableName].AcceptChanges();
                  }

                  // find matching RemoteTellerSessionRequestId in both ATM and TELLER logs (won't find any)

                  if (atmLog_HttpRequests.AsEnumerable() != null && tellerLog.AsEnumerable() != null)
                  {
                     matchField = "SessionRequestId";
                     queryDescription = $"Atm & Teller INNER JOIN {matchField}";

                     var queryAtmWorkstationMatchSessionRequestId =
                         from atm in atmLog_HttpRequests.AsEnumerable()
                         join teller in tellerLog.AsEnumerable()
                         on atm.Field<string>(matchField) equals teller.Field<string>(matchField)
                         where atm.Field<string>(matchField) != ""
                         select new
                         {
                            AtmFilename = atm.Field<string>("file"),
                            AtmTimestamp = atm.Field<string>("time"),
                            TellerFilename = teller.Field<string>("file"),
                            TellerTimestamp = teller.Field<string>("time"),
                            SessionRequestId = teller.Field<string>("SessionRequestId"),
                            ClientSessionId = atm.Field<string>("ClientSessionId"),
                            AssetName = atm.Field<string>("AssetName"),
                            FlowPoint = atm.Field<string>("flowpoint"),
                            TellerName = teller.Field<string>("teller")
                         };

                     foreach (var line in queryAtmWorkstationMatchSessionRequestId)
                     {
                        AddQueryRowToMetaTable(bTable.dTableSet.Tables[tableName], line, queryDescription);
                     }

                     bTable.dTableSet.Tables[tableName].AcceptChanges();
                  }

                  // find matching Teller ClientSessionId in both ATM and SERVER logs

                  if (atmLog_HttpRequests.AsEnumerable() != null && serverLog.AsEnumerable() != null)
                  {
                     matchField = "ClientSessionId";
                     queryDescription = $"Atm & Server INNER JOIN {matchField}";

                     var queryAtmWorkstationMatchClientSessionId =
                         from atm in atmLog_HttpRequests.AsEnumerable()
                         join server in serverLog.AsEnumerable()
                         on atm.Field<string>(matchField) equals server.Field<string>(matchField)
                         where atm.Field<string>(matchField) != ""
                         select new
                         {
                            AtmFilename = atm.Field<string>("file"),
                            AtmTimestamp = atm.Field<string>("time"),
                            ServerFilename = server.Field<string>("file"),
                            ServerTimestamp = server.Field<string>("time"),
                            SessionRequestId = server.Field<string>("SessionRequestId"),
                            ClientSessionId = atm.Field<string>("ClientSessionId"),
                            AssetName = atm.Field<string>("AssetName"),
                            FlowPoint = atm.Field<string>("flowpoint"),
                            TellerName = server.Field<string>("teller")
                         };

                     foreach (var line in queryAtmWorkstationMatchClientSessionId)
                     {
                        AddQueryRowToMetaTable(bTable.dTableSet.Tables[tableName], line, queryDescription);
                     }

                     bTable.dTableSet.Tables[tableName].AcceptChanges();
                  }

                  // find matching Teller ClientSessionId in both ATM and TELLER logs

                  if (atmLog_HttpRequests.AsEnumerable() != null && tellerLog.AsEnumerable() != null)
                  {
                     matchField = "ClientSessionId";
                     queryDescription = $"Atm & Teller INNER JOIN {matchField}";

                     var queryAtmWorkstationMatchClientSessionId =
                         from atm in atmLog_HttpRequests.AsEnumerable()
                         join teller in tellerLog.AsEnumerable()
                         on atm.Field<string>(matchField) equals teller.Field<string>(matchField)
                         where atm.Field<string>(matchField) != ""
                         select new
                         {
                            AtmFilename = atm.Field<string>("file"),
                            AtmTimestamp = atm.Field<string>("time"),
                            TellerFilename = teller.Field<string>("file"),
                            TellerTimestamp = teller.Field<string>("time"),
                            SessionRequestId = atm.Field<string>("SessionRequestId"),
                            ClientSessionId = atm.Field<string>("ClientSessionId"),
                            AssetName = atm.Field<string>("AssetName"),
                            FlowPoint = atm.Field<string>("flowpoint"),
                            TellerName = atm.Field<string>("teller")
                         };

                     foreach (var line in queryAtmWorkstationMatchClientSessionId)
                     {
                        AddQueryRowToMetaTable(bTable.dTableSet.Tables[tableName], line, queryDescription);
                     }

                     bTable.dTableSet.Tables[tableName].AcceptChanges();
                  }
               }
            }
            catch (Exception ex)
            {

            }

 

            /* MoniPlus2sExtension
            try
            {
               MachineTime machineTime = new MachineTime(DateTime.Parse(Timestamp), AssetName, AssetName, RestResource, MessageBody);

               if (machineTime.IsValid)
               {
                  MachineTimesList.Add(machineTime);

                  //MachineTimes.Add(machineTime.LogSourceMachine, machineTime);
               }
            }
            catch (Exception ex)
            {
               // failed format - ignore for now
            }
            */

            // ServerRequest
            /*
               // messages contain clues to the times on Server and ATM machines.  Teller workstation does not have such timestamp, another method must be used.
               //
               // ParseType (use to identify the type of machine where the log was generated)
               // Sent/Receive (message direction indicates the source and destination machines)
               //
               // RECEIVED AT ATM FROM SERVER
               //(ActiveTellerAgent_20231104_030107.log)           2023-11-04 10:45:07 Server message data {"Id":34442,"AssetName":"NM000562","TellerSessionRequestId":43278,"Timestamp":"2023-11-04T09:48:07.4570066-07:00","TellerInfo":{"ClientSessionId":5140,"TellerName":"Jorge","VideoConferenceUri":"192.168.20.142","TellerId":"jocadena"}}
               //(ActiveTellerAgentExtensions_20231104_030107.log) 2023-11-04 10:45:07 [MoniPlus2sExtension] Sending TellerSession to application: {"Id":34442,"AssetName":"NM000562","TellerSessionRequestId":43278,"Timestamp":"2023-11-04T09:48:07.4570066-07:00","TellerInfo":{"ClientSessionId":5140,"TellerName":"Jorge","VideoConferenceUri":"192.168.20.142","TellerId":"jocadena"}}
               //
               //(ActiveTellerAgent_20231104_030107.log)           2023-11-04 11:06:20 Server message data {"TaskId":9,"TaskName":"ScanIdTask","EventName":"ScanIdRequest","Data":"{\"Name\":\"ScanIdRequest\",\"TellerId\":null,\"DateTime\":\"2023-11-04T10:09:20.7777751-07:00\",\"TaskTimeout\":null}","Id":228115,"AssetName":"NM000562","TellerSessionId":34462,"TransactionDetail":null,"Timestamp":"2023-11-04T10:09:20.7827608-07:00","TellerInfo":{"ClientSessionId":5140,"TellerName":"Jorge","VideoConferenceUri":"192.168.20.142","TellerId":"jocadena"}}
               //(ActiveTellerAgentExtensions_20231104_030107.log) 2023-11-04 11:06:20 [MoniPlus2sExtension] Sending RemoteControlTaskMessage to application: {"AssetName":"NM000562","TaskId":9,"TaskName":"ScanIdTask","EventName":"ScanIdRequest","EventData":"{\"Name\":\"ScanIdRequest\",\"TellerId\":null,\"DateTime\":\"2023-11-04T10:09:20.7777751-07:00\",\"TaskTimeout\":null}","Extras":null,"TransactionData":null,"TellerInfo":{"ClientSessionId":5140,"TellerName":"Jorge","VideoConferenceUri":"192.168.20.142","TellerId":"jocadena"}}
               //
               // ATM RESPONSE SENT TO SERVER (with FlowPoint)
               //                                                  2023-11-04 11:06:26 [MoniPlus2sExtension] Firing agent message event: RemoteControlEvent - POST - {"TaskId":9,"TaskName":"ScanIdTask","EventName":"IdScanCompleted","Data":"{\"Name\":\"IdScanCompleted\",\"Detail\":\"OK\",\"TransactionDetail\":{\"Accounts\":null,\"Id\":0,\"TellerSessionActivityId\":0,\"TransactionType\":null,\"ApproverId\":null,\"IdScans\":[{\"BackImageName\":null,\"BackImageRelativeUri\":null,\"FrontImageName\":\"C:\\\\IDSImages\\\\FRONT_20231104_110620.JPG\",\"FrontImageRelativeUri\":null,\"ScanIndex\":0,\"Id\":0,\"TransactionDetailId\":0,\"Review\":null}],\"Checks\":null,\"TransactionCashDetails\":null,\"TransactionOtherAmounts\":null,\"TransactionWarnings\":null}}","Id":0,"AssetName":"NM000562","TellerSessionId":34462,"TransactionDetail":{"Accounts":null,"Id":0,"TellerSessionActivityId":0,"TransactionType":null,"ApproverId":null,"IdScans":[{"BackImageName":null,"BackImageRelativeUri":null,"FrontImageName":"C:\\IDSImages\\FRONT_20231104_110620.JPG","FrontImageRelativeUri":null,"ScanIndex":0,"Id":0,"TransactionDetailId":0,"Review":null}],"Checks":null,"TransactionCashDetails":null,"TransactionOtherAmounts":null,"TransactionWarnings":null},"Timestamp":"2023-11-04T11:06:26.219672-07:00","TellerInfo":{"ClientSessionId":5140,"TellerName":null,"VideoConferenceUri":null,"TellerId":null}}
               //
               // TELLER SENT TO ATM VIA THE SERVER
               //(Workstation20231104.log.1210.bak)                [2023-11-04 11:09:20-839][3][OnExecute           ]Executing ScanIdTask 9
               //
               // RECEIVED AT SERVER FROM TELLER
               //???
               //
               // SENT BY SERVER TO ATM
               //???
               //
               // RECEIVED AT WORKSTATION FROM SERVER
               //(Workstation20231104.log.1210.bak)                [2023-11-04 11:09:26-593][3][DataFlowManager     ]Received IdScanCompleted event for ScanIdTask 9 for asset NM000562
               //
               // ATM RESPONSE SENT TO SERVER (with FlowPoint)
               //2023-11-04 11:06:26 [MoniPlus2sExtension] Firing agent message event: RemoteControlEvent - POST - {"TaskId":9,"TaskName":"ScanIdTask","EventName":"IdScanCompleted","Data":"{\"Name\":\"IdScanCompleted\",\"Detail\":\"OK\",\"TransactionDetail\":{\"Accounts\":null,\"Id\":0,\"TellerSessionActivityId\":0,\"TransactionType\":null,\"ApproverId\":null,\"IdScans\":[{\"BackImageName\":null,\"BackImageRelativeUri\":null,\"FrontImageName\":\"C:\\\\IDSImages\\\\FRONT_20231104_110620.JPG\",\"FrontImageRelativeUri\":null,\"ScanIndex\":0,\"Id\":0,\"TransactionDetailId\":0,\"Review\":null}],\"Checks\":null,\"TransactionCashDetails\":null,\"TransactionOtherAmounts\":null,\"TransactionWarnings\":null}}","Id":0,"AssetName":"NM000562","TellerSessionId":34462,"TransactionDetail":{"Accounts":null,"Id":0,"TellerSessionActivityId":0,"TransactionType":null,"ApproverId":null,"IdScans":[{"BackImageName":null,"BackImageRelativeUri":null,"FrontImageName":"C:\\IDSImages\\FRONT_20231104_110620.JPG","FrontImageRelativeUri":null,"ScanIndex":0,"Id":0,"TransactionDetailId":0,"Review":null}],"Checks":null,"TransactionCashDetails":null,"TransactionOtherAmounts":null,"TransactionWarnings":null},"Timestamp":"2023-11-04T11:06:26.219672-07:00","TellerInfo":{"ClientSessionId":5140,"TellerName":null,"VideoConferenceUri":null,"TellerId":null}}
               //2023-09-25 00:26:19 [MoniPlus2sExtension] Firing agent message event: ApplicationState - POST - {"Id":0,"AssetName":"NM000559","ApplicationAvailability":0,"Customer":{"CustomerId":""},"Timestamp":"2023-09-25T00:26:19.0346019-07:00","FlowPoint":"Common-InsertCardRead","State":"Identification","OperatingMode":"SelfService","TransactionType":"","Language":"English","VoiceGuidance":false}
               //2023-09-25 00:26:41 [MoniPlus2sExtension] Firing agent message event: ApplicationState - POST - {"Id":0,"AssetName":"NM000559","ApplicationAvailability":0,"Customer":{"CustomerId":"0009754489"},"Timestamp":"2023-09-25T00:26:41.1266685-07:00","FlowPoint":"Common-DetermineDoYouWantBalanceInquiry","State":"Identification","OperatingMode":"SelfService","TransactionType":"CustomerIdentification","Language":"English","VoiceGuidance":false}
               //
               // RECEIVED AT SERVER FROM ATM (has FlowPoint)
               //(ActiveTellerServer_20231128_010002.log)          2023-11-28 08:01:11 TellerRequestManager.HandleTellerSessionRequest handled tellerRequest {"Id":23565,"AssetName":"21PLEA04D","Timestamp":"2023-11-28T08:01:13.3746831-06:00","CustomerId":"0000632448","CustomerName":"PHILLIPS,CAMERON","FlowPoint":"Common-RequestAssistance","RequestContext":"HelpButton","ApplicationState":"MainMenu","TransactionType":"","Language":"English","VoiceGuidance":false,"RoutingProfile":{"SupportedCallType":"BeeHD"}}
               //
               // RECEIVED AT SERVER FROM ATM
               //(ActiveTellerServer.log)                          2023-10-16 08:48:11 Get - /activeteller/api/TellerActivities?userid=20&start=2023-10-16T00%3a00%3a00.000-06%3a00&end=2023-10-16T23%3a59%3a59.000-06%3a00
               //(ActiveTellerServer.log)                          2023-10-16 08:48:17 The following exception occurred while processing teller activity detail to display:
                                                                     System.ArgumentNullException: Value cannot be null.
                                                                     Parameter name: format
                                                                        at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)
                                                                        at NH.ActiveTeller.Server.Observers.TellerSessionJournalWriter.BuildActivityDescription(TellerActivity tellerActivity)
                                                                        at NH.ActiveTeller.Server.Providers.TellerActivityProvider.MapRecordToModel(TellerJournalRecord record)
                                                                     {"Id":357996,"ActivityDescription":"Teller session start","ActivityDetail":null,"ActivityDetailToDisplay":"TellerSession_Insert_Withdrawal","ActivityName":"Withdrawal","ActivityState":"Insert","ActivityType":"TellerSession","AssetName":"TX005019","BranchName":"Zaragoza","BranchNumber":"310","ClientSessionId":4541,"CustomerName":"DURAN,ARLEEN","SourceApplication":2,"SystemActivity":0,"TellerControlTaskId":null,"TellerSessionId":29411,"Timestamp":"2023-10-16T08:07:23.92","UserId":20,"UserName":"kpetroni"}
                                                                     {"Id":358016,"ActivityDescription":"Teller session start","ActivityDetail":null,"ActivityDetailToDisplay":"TellerSession_Insert_PostIdle","ActivityName":"PostIdle","ActivityState":"Insert","ActivityType":"TellerSession","AssetName":"TX005016","BranchName":"Lee Trevino","BranchNumber":"305","ClientSessionId":4541,"CustomerName":"","SourceApplication":2,"SystemActivity":0,"TellerControlTaskId":null,"TellerSessionId":29414,"Timestamp":"2023-10-16T08:19:53.743","UserId":20,"UserName":"kpetroni"}
               //
               // SENT TO WORKSTATION FROM SERVER
               //???

               // AT SERVER
               //   TellerRequestManager
                 2023-11-17 08:00:58 TellerRequestManager.HandleTellerSessionRequest is using RoutingRule.PREFER_BRANCH for tellerRequest from 21PLEA03D
                 2023-11-17 08:00:58 TellerRequestManager.HandleTellerSessionRequest handled tellerRequest {"Id":20055,"AssetName":"21PLEA03D","Timestamp":"2023-11-17T08:01:02.043053-06:00","CustomerId":"","CustomerName":"","FlowPoint":"Common-RequestAssistance","RequestContext":"HelpButton","ApplicationState":"PostIdle","TransactionType":"","Language":"English","VoiceGuidance":false,"RoutingProfile":{"SupportedCallType":"BeeHD"}}




               2023-11-28 10:51:14 Get - /ActiveTeller/api/v2/TellerTransactions?userid=2%2c3%2c12%2c5%2c6%2c8%2c4%2c20%2c27%2c29%2c34%2c36%2c26%2c28%2c22%2c35%2c14%2c24%2c37%2c38%2c43%2c39%2c15%2c42%2c16%2c31%2c33%2c45%2c40%2c44%2c46%2c41%2c52%2c51%2c47%2c54%2c55%2c48%2c53%2c49%2c50%2c56&assetname=12PROS04D%2c14STUR02L%2c12PROS01L%2c14STUR05D%2c18OAKCRK01L%2c21PLEA01L%2c21PLEA02L%2c09KENO02D%2c05APP01L%2c07LOO01D%2c09KENO01D%2c12PROS03D%2c21PLEA03D%2c14STUR03D%2c18OAKCRK03D%2c16CENT04D%2c16CENT06D%2c18OAKCRK04D%2c14STUR01L%2c09KENO03D%2c18OAKCRK02L%2c12PROS02L%2c25MUK02D%2c14STUR04D%2c25MUK01L%2c21PLEA04D%2c16CENT01L%2c27MTSIN01L&start=2023-11-27T00%3a00%3a00.000-06%3a00&end=2023-11-27T23%3a59%3a59.000-06%3a00&transactionstatus=1,2

ActiveTellerServer_20231128_010002.log
2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: OnConnected event fired.
2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: UpdateTellerSessionStatisticsSubscription was called with True
2023-11-28 08:27:33 UpdateSubscriptionForSelections: clientSessionId: 4292, old: 0, new: 29
2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: Connection was added to the connectionMap. Count=35
2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: Connection was added to the clientSessionMap for clientSessionId 4292. Count=8
2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: starting SendOpenTellerSessionRequests
2023-11-28 08:27:33 Connection 39a56020-c423-4623-a3a2-4c87f9ac42ce: finishing SendOpenTellerSessionRequests
2023-11-28 08:27:33 SetTellerAvailability was called with available for client session 4292.
2023-11-28 08:27:33 [BEFORE] RemotePool.FireResourceAvailable - tellerResource.Id = 4292; UnavailableResources.Count = 0; AssignedList.Count = 0; AvailableResources.Count = 7
2023-11-28 08:27:33 [AFTER] RemotePool.FireResourceAvailable - tellerResource.Id = 4292; UnavailableResources.Count = 0; AssignedList.Count = 0; AvailableResources.Count = 8
..
2023-11-28 11:01:28 Connection c421f779-9a47-4f3b-848b-f894dfa6cbdd: Connection was updated in the connectionMap. Count=37
2023-11-28 11:01:28 Connection c421f779-9a47-4f3b-848b-f894dfa6cbdd: Connection was updated in the assetMap for '12PROS04D'. Count=27
2023-11-28 11:01:28 Post - /ActiveTeller/api/tellersessionrequests
2023-11-28 11:01:28 TerminalProfileHoursPolicy.Find - Asset 25 is currently in terminal profile hours 1: returning RoutingRule.PREFER_BRANCH.
2023-11-28 11:01:28 TellerRequestManager.HandleTellerSessionRequest is using RoutingRule.PREFER_BRANCH for tellerRequest from 12PROS04D
2023-11-28 11:01:28 Client session 4292 can handle the request from 12PROS04D
2023-11-28 11:01:28 TellerRequestManager.HandleTellerSessionRequest handled tellerRequest {"Id":23660,"AssetName":"12PROS04D","Timestamp":"2023-11-28T11:01:32.2281847-06:00","CustomerId":"","CustomerName":"","FlowPoint":"Common-RequestAssistance","RequestContext":"HelpButton","ApplicationState":"PostIdle","TransactionType":"","Language":"English","VoiceGuidance":false,"RoutingProfile":{"SupportedCallType":"BeeHD"}}
2023-11-28 11:01:29 Post - /ActiveTeller/api/remotecontroltasks
2023-11-28 11:01:29 Post - /ActiveTeller/api/remotecontrolevents
2023-11-28 11:01:33 Put - /ActiveTeller/api/applicationstates/5

Workstation20231128.log
[2023-11-28 11:01:28-311][3][DataFlowManager     ]Teller session request 23660 for asset 12PROS04D
[2023-11-28 11:01:28-311][3][MainWindow          ]Teller session requested for asset 12PROS04D for teller session request 23660. IsAcceptable=True. 
[2023-11-28 11:01:28-327][3][ConnectionManager   ]Update teller session statistics: Pending=1 Current=4
[2023-11-28 11:01:28-327][3][DataFlowManager     ]Teller session statistics update received
[2023-11-28 11:01:29-643][3][DataFlowManager     ]Received ItemsTaken event for DispenseTask 25 for asset 16CENT06D
[2023-11-28 11:01:29-644][3][WithdrawalTaskHandler]OnItemsTaken started.
[2023-11-28 11:01:29-644][3][WithdrawalTaskHandler]AddReceiptList started.
[2023-11-28 11:01:29-645][3][WithdrawalTaskHandler]InitializeData started.
[2023-11-28 11:01:29-646][3][WithdrawalTaskHandler]CheckForPartialDispense started.
[2023-11-28 11:01:29-647][3][CompleteTask        ]Completing DispenseTask 25
[2023-11-28 11:01:29-647][3][CompleteTask        ]Completing DispenseTask 25
[2023-11-28 11:01:33-174][3][MainWindow          ]BtnEndConference was clicked
[2023-11-28 11:01:34-484][3][UIManager           ]BtnEndConference set to disabled and visible
[2023-11-28 11:01:34-484][3][BeeHDVideoControl   ]StopVideoCall


            if (dict.ContainsKey("AssetName"))
               {
                  AssetName = (string)dict["AssetName"];
               }

               if (dict.ContainsKey("Timestamp"))
               {
                  // if conversion to DateTime sees "ANY" timezone offset in the string .NET adjusts the result to LocalTime
                  // FOR THE MACHINE ON WHICH THIS PARSER IS RUNNING, not the source machine of the log file
                  string wonkyTimestamp_DONOTUSE = dict["Timestamp"].ToString();

                  try
                  {
                     MachineTime machineTime = new MachineTime(DateTime.Parse(Timestamp), AssetName, AssetName, requestType.ToString(), Payload);

                     MachineTimesList.Add(machineTime);

                     //MachineTimes.Add(machineTime.LogSourceMachine, machineTime);
                  }
                  catch (Exception ex)
                  {
                     // failed format - ignore for now
                  }
               }

             */

            ctx.LogWriteLine("------------------------------------------------");
            ctx.LogWriteLine("Write XML query results: " + viewName);

            bTable.WriteXmlFile();
         }

         // update logInfo and return
         ctx.ConsoleWriteLogLine("End Analyze: " + viewName);
      }


      /// <summary>
      /// Adds to the MetaTable, identifying whether the line comes from the ATM or the Teller log depending
      /// on SIP header type and direction.
      /// </summary>
      /// <param name="table"></param>
      /// <param name="line"></param>
      /// <param name="queryDescription"></param>
      private void AddBeeQueryRowToMetaTable(System.Data.DataTable table, object line, string queryDescription)
      {
         DataRow dataRow = table.Rows.Add();

         // file and time are standard fields
         dataRow["file"] = FieldExistsValue(line, "AtmFilename");
         dataRow["line"] = FieldExistsValue(line, "AtmLine");
         dataRow["machinetype"] = FieldExistsValue(line, "MachineType");
         dataRow["time"] = FieldExistsValue(line, "AtmTimestamp");
         dataRow["query"] = queryDescription;

         bool isAtm = false;
         bool isTeller = false;
         string msgheader = FieldExistsValue(line, "MsgHeader");
         string direction = FieldExistsValue(line, "Direction");

         // assign file sources using the normal direction of ActiveTeller INVITEs (ATM sends, Teller answers)
         switch (msgheader)
         {
            case "INVITE":
            case "ACK":
               isAtm = direction == "sent";
               isTeller = direction == "received";
               break;

            case "RINGING":
            case "OK":
               isTeller = direction == "sent";
               isAtm = direction == "received";
               break;

            // BYE can be initiated by either side
            case "BYE":
            default:
               break;
         }

         if (isAtm)
         {
            dataRow["atmfile"] = FieldExistsValue(line, "AtmFilename");
            dataRow["atmline"] = FieldExistsValue(line, "AtmLine");
            dataRow["atmtime"] = FieldExistsValue(line, "AtmTimestamp");
         }

         if (isTeller)
         {
            dataRow["tellerfile"] = FieldExistsValue(line, "TellerFilename");
            dataRow["tellerline"] = FieldExistsValue(line, "TellerLine");
            dataRow["tellertime"] = FieldExistsValue(line, "TellerTimestamp");
         }

         dataRow["callidheader"] = FieldExistsValue(line, "CallIdHeader");
         dataRow["msgheader"] = FieldExistsValue(line, "MsgHeader");
         dataRow["cseqheader"] = FieldExistsValue(line, "CSeqHeader");
         dataRow["direction"] = FieldExistsValue(line, "Direction");
      }


      /// <summary>
      /// Adds to the MetaTable, identifying whether the line comes from the ATM or the Teller log depending
      /// on SIP header type and direction.
      /// </summary>
      /// <param name="table"></param>
      /// <param name="line"></param>
      /// <param name="queryDescription"></param>
      private void AddMergedBeeQueryRowToMetaTable(System.Data.DataTable table, object line, string queryDescription)
      {
         if (FieldExistsValue(line, "AtmFilename") == string.Empty || FieldExistsValue(line, "TellerFilename") == string.Empty)
         {
            return;
         }

         DataRow dataRow = table.Rows.Add();

         // file and time are standard fields
         dataRow["file"] = FieldExistsValue(line, "AtmFilename");
         dataRow["time"] = FieldExistsValue(line, "AtmTimestamp");
         dataRow["query"] = queryDescription;

         dataRow["atmfile"] = FieldExistsValue(line, "AtmFilename");
         dataRow["atmline"] = FieldExistsValue(line, "AtmLine");
         dataRow["atmtime"] = FieldExistsValue(line, "AtmTimestamp");
         dataRow["tellerfile"] = FieldExistsValue(line, "TellerFilename");
         dataRow["tellerline"] = FieldExistsValue(line, "TellerLine");
         dataRow["tellertime"] = FieldExistsValue(line, "TellerTimestamp");

         DateTime atmdate;
         DateTime serverdate;
         DateTime tellerdate;
         string TimeFormatStringMsec = "c";

         if (!DateTime.TryParse(FieldExistsValue(line, "AtmTimestamp"), out atmdate))
         {
            atmdate = DateTime.MinValue;
         }

         if (!DateTime.TryParse(FieldExistsValue(line, "ServerTimestamp"), out serverdate))
         {
            serverdate = DateTime.MinValue;
         }

         if (!DateTime.TryParse(FieldExistsValue(line, "TellerTimestamp"), out tellerdate))
         {
            tellerdate = DateTime.MinValue;
         }

         if (atmdate != DateTime.MinValue && serverdate != DateTime.MinValue)
         {
            TimeSpan diff = atmdate.Subtract(serverdate);
            dataRow["TimeDiffAtmServer"] = "'" + diff.ToString(TimeFormatStringMsec);
         }

         if (tellerdate != DateTime.MinValue && serverdate != DateTime.MinValue)
         {
            TimeSpan diff = tellerdate.Subtract(serverdate);
            dataRow["TimeDiffTellerServer"] = "'" + diff.ToString(TimeFormatStringMsec);
         }

         if (atmdate != DateTime.MinValue && tellerdate != DateTime.MinValue)
         {
            TimeSpan diff = atmdate.Subtract(tellerdate);
            dataRow["TimeDiffAtmTeller"] = "'" + diff.ToString(TimeFormatStringMsec);
         }

         dataRow["callidheader"] = FieldExistsValue(line, "CallIdHeader");
         dataRow["msgheader"] = FieldExistsValue(line, "MsgHeader");
         dataRow["cseqheader"] = FieldExistsValue(line, "CSeqHeader");
         dataRow["direction"] = FieldExistsValue(line, "Direction");
      }


      private void AddQueryRowToMetaTable(System.Data.DataTable table, object line, string queryDescription)
      {
         DataRow dataRow = table.Rows.Add();

         // file and time are standard fields
         dataRow["file"] = FieldExistsValue(line, "AtmFilename");
         dataRow["time"] = FieldExistsValue(line, "AtmTimestamp");

         dataRow["query"] = queryDescription;
         dataRow["atmfile"] = FieldExistsValue(line, "AtmFilename");
         dataRow["atmline"] = FieldExistsValue(line, "AtmLine");
         dataRow["atmtime"] = FieldExistsValue(line, "AtmTimestamp");
         dataRow["serverfile"] = FieldExistsValue(line, "ServerFilename");
         dataRow["serverline"] = FieldExistsValue(line, "ServerLine");
         dataRow["servertime"] = FieldExistsValue(line, "ServerTimestamp");
         dataRow["tellerfile"] = FieldExistsValue(line, "TellerFilename");
         dataRow["tellerline"] = FieldExistsValue(line, "TellerLine");
         dataRow["tellertime"] = FieldExistsValue(line, "TellerTimestamp");
         dataRow["AssetName"] = FieldExistsValue(line, "AssetName");
         dataRow["SessionRequestId"] = FieldExistsValue(line, "SessionRequestId");
         dataRow["ClientSessionId"] = FieldExistsValue(line, "ClientSessionId");
         dataRow["TellerName"] = FieldExistsValue(line, "TellerName");
         dataRow["FlowPoint"] = FieldExistsValue(line, "FlowPoint");

         DateTime atmdate;
         DateTime serverdate;
         DateTime tellerdate;
         string TimeFormatStringMsec = "c";

         if (!DateTime.TryParse(FieldExistsValue(line, "AtmTimestamp"), out atmdate))
         {
            atmdate = DateTime.MinValue;
         }

         if (!DateTime.TryParse(FieldExistsValue(line, "ServerTimestamp"), out serverdate))
         {
            serverdate = DateTime.MinValue;
         }

         if (!DateTime.TryParse(FieldExistsValue(line, "TellerTimestamp"), out tellerdate))
         {
            tellerdate = DateTime.MinValue;
         }

         if (atmdate != DateTime.MinValue && serverdate != DateTime.MinValue)
         {
            TimeSpan diff = atmdate.Subtract(serverdate);
            dataRow["TimeDiffAtmServer"] = "'" + diff.ToString(TimeFormatStringMsec);
         }

         if (tellerdate != DateTime.MinValue && serverdate != DateTime.MinValue)
         {
            TimeSpan diff = tellerdate.Subtract(serverdate);
            dataRow["TimeDiffTellerServer"] = "'" + diff.ToString(TimeFormatStringMsec);
         }

         if (atmdate != DateTime.MinValue && tellerdate != DateTime.MinValue)
         {
            TimeSpan diff = atmdate.Subtract(tellerdate);
            dataRow["TimeDiffAtmTeller"] = "'" + diff.ToString(TimeFormatStringMsec);
         }
      }

   /// <summary>
   /// Gets the value of the field from the line object.
   /// </summary>
   /// <param name="line">a line obtained from iterating over a Linq query result</param>
   /// <param name="name">the name of the field</param>
   /// <returns>The value of the field or empty string</returns>
   private string FieldExistsValue( object line, string name)
      {
         // { AtmFilename = "ActiveTellerAgent_20231120_030031.log", AtmTimestamp = "2023-11-20 07:41:00", ServerFilename = "ActiveTellerServer_20231120_010002.log", ServerTimestamp = "2023-11-20 07:41:43", SessionRequestId = "1271", ClientSessionId = "1129", AssetName = "A060318", FlowPoint = "", TellerName = "" }

         string lines = line.ToString();
         string target = name + " = ";
         int idx = lines.IndexOf(target);

         if (idx != -1)
         {
            string remainder = lines.Substring(idx + target.Length);

            // will fail if the value contains a comma - expect it will be somehow escaped though
            idx = remainder.IndexOf(",", 0);

            if (idx != -1)
            {
               // works whether the field has a value, or is empty
               return remainder.Substring(0, idx);
            }

            // check if this is the last field
            idx = remainder.IndexOf("}");

            if (idx != -1)
            {
               return remainder.Substring(0, idx - 1);
            }
         }

         return string.Empty;
      }

      public override void Cleanup(IContext ctx)
      {
         base.Cleanup(ctx);
      }
   }
}

